#!/bin/bash
#PBS -W group_list=cms_stage2
#PBS -l nodes=1
#PBS -l mem=2000mb
#PBS -l walltime=4:00:00
#PBS -j oe

main ()
{

  # run the AutoCMS Configuration File
  source $CONFIGFILE

  echo "${AUTOCMS_STARTTIME_TOKEN}$(date +%s)"
  echo -n "timestamp_begin="; date +%s
  echo -n "SKIM_TEST: Beginning at "
  date
  echo "${AUTOCMS_NODE_TOKEN}${HOSTNAME}"
  echo "SKIM_TEST: Running on node $HOSTNAME"  

  #-----------------------------------------------------------------------
  printbanner "Setting up enviornment"

  AUTODIR=$AUTOCMS_BASEDIR
  cd $AUTODIR/skim_test/
  export SCRAM_ARCH=slc6_amd64_gcc472
  setpkgs -a lio

  #-----------------------------------------------------------------------
  printbanner "Checking Input File"

  if [ -n "$INPUTFILE" ]; then
    echo "${AUTOCMS_INPUTFILE_TOKEN}${INPUTFILE}"
    echo "SKIM_TEST: Will use input file $INPUTFILE"
    echo "-------------------------------------"
    echo "Running lio-inspection on $INPUTFILE"
    #lio_inspect -i 20 ${INPUTFILE/file:/}
    lio_inspect -i 20 -d 20 -log /tmp/inspect.${PBS_JOBID} ${INPUTFILE/file:/} | tee /tmp/check.${PBS_JOBID}
    [ "$(grep 'Submitted: 0' /tmp/check.${PBS_JOBID})" == "" ] && rm /tmp/inspect.${PBS_JOBID}
    /bin/rm /tmp/check.${PBS_JOBID}
    echo "-------------------------------------"

  else
    echo "${AUTOCMS_INPUTFILE_TOKEN}Default"
    echo "SKIM_TEST: WARNING: no input file specified, using default"
  fi

  #-----------------------------------------------------------------------
  printbanner "Setting up SCRAM environment"

  source /cvmfs/cms.cern.ch/cmsset_default.sh
  SCRAM_TEST_RESULT=$?
  if [ $SCRAM_TEST_RESULT -eq 0 ]; then
    echo "SKIM_TEST: SCRAM Enviornment setup OK"
  else
    echo "${AUTOCMS_ERRORMSG_TOKEN}SCRAM Enviornment setup ERROR $SCRAM_TEST_RESULT"
    echo "SKIM_TEST: SCRAM Enviornment setup ERROR $SCRAM_TEST_RESULT"
    exitclean $SCRAM_TEST_RESULT
  fi

  #-----------------------------------------------------------------------
  printbanner "Testing tmp filesystem"

  cd /tmp/$PBS_JOBID

  touch tmpfs_test
  TEMPFS_TEST_RESULT=$?
  if [ $TEMPFS_TEST_RESULT -eq 0 ]; then
    echo "SKIM_TEST: touch in directory /tmp/$PBS_JOBID OK"
  else
    echo "${AUTOCMS_ERRORMSG_TOKEN}touch in directory /tmp/$PBS_JOBID ERROR $TEMPFS_TEST_RESULT"
    echo "SKIM_TEST: touch in directory /tmp/$PBS_JOBID ERROR $TEMPFS_TEST_RESULT"
    exitclean $TEMPFS_TEST_RESULT
  fi

  #-----------------------------------------------------------------------
  printbanner "Setting up CMSSW project area"

  scram p CMSSW $AUTOCMS_CMSSW_VERSION
  PROJECT_TEST_RESULT=$?
  if [ $PROJECT_TEST_RESULT -eq 0 ]; then
    echo "SKIM_TEST: CMSSW project area setup OK"
  else
    echo "${AUTOCMS_ERRORMSG_TOKEN}CMSSW project area setup ERROR $PROJECT_TEST_RESULT"
    echo "SKIM_TEST: CMSSW project area setup ERROR $PROJECT_TEST_RESULT"
    exitclean $PROJECT_TEST_RESULT
  fi

  #-----------------------------------------------------------------------
  printbanner "Initializing CMSSW runtime environment and copying input file"

  cd $AUTOCMS_CMSSW_VERSION
  eval `scramv1 runtime -sh`
  cp $AUTODIR/skim_test/skimTestIvars.py .

  #-----------------------------------------------------------------------
  printbanner "Running CMSSW Skim Job"

  echo;echo;echo;echo "BEGIN CMSSW EXECUTION: $(date)";echo;echo
  if [ -z "$INPUTFILE" ]; then
    /usr/bin/timeout --signal=KILL $AUTOCMS_CMSRUN_TIMEOUT cmsRun skimTestIvars.py
    CMSSW_TEST_RESULT=$?
  else
    /usr/bin/timeout --signal=KILL $AUTOCMS_CMSRUN_TIMEOUT cmsRun skimTestIvars.py inputFiles=$INPUTFILE
    CMSSW_TEST_RESULT=$?
  fi
  echo;echo;echo;echo "END CMSSW EXECUTION: $(date)";echo;echo

  if [ $CMSSW_TEST_RESULT -eq 0 ]; then
    echo "SKIM_TEST: CMSSW execution OK"
  else
    if [  $CMSSW_TEST_RESULT -eq 137 ]; then
      echo "${AUTOCMS_ERRORMSG_TOKEN}CMMSW received KILL signal (likely excessive wall clock time) ERROR $CMSSW_TEST_RESULT"
      echo "SKIM_TEST: CMMSW received KILL signal (likely excessive wall clock time) ERROR $CMSSW_TEST_RESULT"
    else
      echo "${AUTOCMS_ERRORMSG_TOKEN}}CMSSW execution ERROR $CMSSW_TEST_RESULT"
      echo "SKIM_TEST: CMSSW execution ERROR $CMSSW_TEST_RESULT"
    fi
    exitclean $CMSSW_TEST_RESULT
  fi

  #-----------------------------------------------------------------------
  printbanner "Checking output file and stageout scripts"

  echo "Checking output file:"
  ls -l hiHighPt.root

  echo "-------------------------"
  echo "Checking Stageout scripts"
  echo "-------------------------"
  echo "Running: ls -lh /usr/local/cms-stageout/"
  ls -lh /usr/local/cms-stageout/
  echo "-------------------------"
  echo "Running: md5sum /usr/local/cms-stageout/vandy.cfg"
  md5sum /usr/local/cms-stageout/vandy.cfg
  echo "Running: md5sum /usr/local/cms-stageout/vandyCp.sh"
  md5sum /usr/local/cms-stageout/vandyCp.sh
  echo "Running: md5sum /usr/local/cms-stageout/vandyRm.sh"
  md5sum /usr/local/cms-stageout/vandyRm.sh
  echo "-------------------------"

  #-----------------------------------------------------------------------
  printbanner "Uploading output file to /lio/lfs"


  echo "construct output file name for upload"
  export DFILE=testoutput_${PBS_JOBID}_hiHighPt.root
  echo "Uploading to $AUTOCMS_STAGEOUT_DIR/$DFILE"
  $AUTOCMS_VANDYCP hiHighPt.root $AUTOCMS_STAGEOUT_DIR/$DFILE
  UPLOAD_TEST_RESULT=$?
  if [ $UPLOAD_TEST_RESULT -eq 0 ]; then
    echo "SKIM_TEST: lio Upload OK"
  else
    echo "${AUTOCMS_ERRORMSG_TOKEN}lio Upload ERROR $UPLOAD_TEST_RESULT"
    echo "SKIM_TEST: lio Upload ERROR $UPLOAD_TEST_RESULT"
    exitclean $UPLOAD_TEST_RESULT
  fi


  echo "Running stat on uploaded file via LFS"
  echo "====================================="
  time stat $AUTOCMS_STAGEOUT_DIR/$DFILE
  echo "====================================="
  echo
  echo "Checking that the uploaded file size is correct"
  LOCAL_OUTPUT_SIZE=$(ls -l hiHighPt.root | awk '{print $5}')
  LSTORE_OUTPUT_SIZE=$( lio_ls @:$AUTOCMS_STAGEOUT_DIR/$DFILE | tail -n 1 | awk '{print $4}')
  echo "    Local size = $LOCAL_OUTPUT_SIZE"
  echo "    LStore size = $LSTORE_OUTPUT_SIZE"
  if [ $LOCAL_OUTPUT_SIZE -ne $LSTORE_OUTPUT_SIZE ]; then
    echo "${AUTOCMS_ERRORMSG_TOKEN}ERROR vandyCp returned 0 but file sizes do not match!"
    echo "SKIM_TEST: ERROR vandyCp returned 0 but file sizes do not match!"
    exitclean 255
  fi 

  echo;echo "Checking user.cms_user_x509 attribute:"
  FILE_DN=$(lio_getattr -al user.cms_user_x509 -new_obj "" -end_obj "" -attr_fmt "%s#%s\n" ${AUTOCMS_STAGEOUT_DIR}/${DFILE} | sed 's/^user.cms_user_x509#//')
  echo "   user.cms_user_x509 = $FILE_DN"; echo

  #-----------------------------------------------------------------------
  printbanner "Deleting output file from /lio/lfs"

  echo "-------------------------------------"
  echo "run lio-inspection on the output file before deleting it"
  lio_inspect -i 20 $AUTOCMS_STAGEOUT_DIR/$DFILE
  echo "-------------------------------------"

  echo "remove the output and check that it is gone"

  $AUTOCMS_VANDYRM $AUTOCMS_STAGEOUT_DIR/$DFILE

  DELETE_TEST_RESULT=$?
  if [ $DELETE_TEST_RESULT -eq 0 ]; then
    echo "SKIM_TEST: /lio/lfs file delete OK"
  else
    echo "SKIM_TEST: /lio/lfs file delete ERROR $DELETE_TEST_RESULT"
    echo "${AUTOCMS_ERRORMSG_TOKEN}/lio/lfs file delete ERROR"
    exitclean $DELETE_TEST_RESULT
  fi

  echo "SKIM_TEST: ALL TESTS SUCCESSFUL"
  exitclean 0
}

exitclean ()
{
    printbanner "Cleaning up /tmp and Exiting"
    if [ -e /tmp/$PBS_JOBID/tmpfs_test ]; then
      rm /tmp/$PBS_JOBID/tmpfs_test
    fi
    if [ -e /tmp/$PBS_JOBID/$AUTOCMS_CMSSW_VERSION ]; then
      rm -r /tmp/$PBS_JOBID/$AUTOCMS_CMSSW_VERSION
    fi
    echo -n "SKIM_TEST: Ending at "; date
    echo "${AUTOCMS_ENDTIME_TOKEN}$(date +%s)"
    echo -n "timestamp_end="; date +%s
    echo "${AUTOCMS_EXITCODE_TOKEN}$1"
    echo "exiting with status $1"
    exit $1
}

printbanner ()
{
  echo -e "\n\n\n"
  echo "*****************************************************"
  echo "*"
  echo "* $1"
  echo "*"
  echo "*****************************************************"
  echo -e "\n\n\n"

}


main
